State 2 conflicts: 1 shift/reduce


Grammar

    0 $accept: SS $end

    1 SS: SS S
    2   | S

    3 S: A ';'

    4 A: ID '=' A
    5  | E
    6  | R

    7 R: F '=' '=' F
    8  | F '<' '=' F
    9  | F '>' '=' F

   10 E: E '+' T
   11  | E '-' T
   12  | T

   13 T: T '*' F
   14  | T '/' F
   15  | F

   16 F: NUM
   17  | ID
   18  | '(' E ')'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 18
')' (41) 18
'*' (42) 13
'+' (43) 10
'-' (45) 11
'/' (47) 14
';' (59) 3
'<' (60) 8
'=' (61) 4 7 8 9
'>' (62) 9
error (256)
NUM (258) 16
ID (259) 4 17


Nonterminals, with rules where they appear

$accept (15)
    on left: 0
SS (16)
    on left: 1 2, on right: 0 1
S (17)
    on left: 3, on right: 1 2
A (18)
    on left: 4 5 6, on right: 3 4
R (19)
    on left: 7 8 9, on right: 6
E (20)
    on left: 10 11 12, on right: 5 10 11 18
T (21)
    on left: 13 14 15, on right: 10 11 12 13 14
F (22)
    on left: 16 17 18, on right: 7 8 9 13 14 15


state 0

    0 $accept: . SS $end

    NUM  shift, and go to state 1
    ID   shift, and go to state 2
    '('  shift, and go to state 3

    SS  go to state 4
    S   go to state 5
    A   go to state 6
    R   go to state 7
    E   go to state 8
    T   go to state 9
    F   go to state 10


state 1

   16 F: NUM .

    $default  reduce using rule 16 (F)


state 2

    4 A: ID . '=' A
   17 F: ID .

    '='  shift, and go to state 11

    '='       [reduce using rule 17 (F)]
    $default  reduce using rule 17 (F)


state 3

   18 F: '(' . E ')'

    NUM  shift, and go to state 1
    ID   shift, and go to state 12
    '('  shift, and go to state 3

    E  go to state 13
    T  go to state 9
    F  go to state 14


state 4

    0 $accept: SS . $end
    1 SS: SS . S

    $end  shift, and go to state 15
    NUM   shift, and go to state 1
    ID    shift, and go to state 2
    '('   shift, and go to state 3

    S  go to state 16
    A  go to state 6
    R  go to state 7
    E  go to state 8
    T  go to state 9
    F  go to state 10


state 5

    2 SS: S .

    $default  reduce using rule 2 (SS)


state 6

    3 S: A . ';'

    ';'  shift, and go to state 17


state 7

    6 A: R .

    $default  reduce using rule 6 (A)


state 8

    5 A: E .
   10 E: E . '+' T
   11  | E . '-' T

    '+'  shift, and go to state 18
    '-'  shift, and go to state 19

    $default  reduce using rule 5 (A)


state 9

   12 E: T .
   13 T: T . '*' F
   14  | T . '/' F

    '*'  shift, and go to state 20
    '/'  shift, and go to state 21

    $default  reduce using rule 12 (E)


state 10

    7 R: F . '=' '=' F
    8  | F . '<' '=' F
    9  | F . '>' '=' F
   15 T: F .

    '='  shift, and go to state 22
    '<'  shift, and go to state 23
    '>'  shift, and go to state 24

    $default  reduce using rule 15 (T)


state 11

    4 A: ID '=' . A

    NUM  shift, and go to state 1
    ID   shift, and go to state 2
    '('  shift, and go to state 3

    A  go to state 25
    R  go to state 7
    E  go to state 8
    T  go to state 9
    F  go to state 10


state 12

   17 F: ID .

    $default  reduce using rule 17 (F)


state 13

   10 E: E . '+' T
   11  | E . '-' T
   18 F: '(' E . ')'

    '+'  shift, and go to state 18
    '-'  shift, and go to state 19
    ')'  shift, and go to state 26


state 14

   15 T: F .

    $default  reduce using rule 15 (T)


state 15

    0 $accept: SS $end .

    $default  accept


state 16

    1 SS: SS S .

    $default  reduce using rule 1 (SS)


state 17

    3 S: A ';' .

    $default  reduce using rule 3 (S)


state 18

   10 E: E '+' . T

    NUM  shift, and go to state 1
    ID   shift, and go to state 12
    '('  shift, and go to state 3

    T  go to state 27
    F  go to state 14


state 19

   11 E: E '-' . T

    NUM  shift, and go to state 1
    ID   shift, and go to state 12
    '('  shift, and go to state 3

    T  go to state 28
    F  go to state 14


state 20

   13 T: T '*' . F

    NUM  shift, and go to state 1
    ID   shift, and go to state 12
    '('  shift, and go to state 3

    F  go to state 29


state 21

   14 T: T '/' . F

    NUM  shift, and go to state 1
    ID   shift, and go to state 12
    '('  shift, and go to state 3

    F  go to state 30


state 22

    7 R: F '=' . '=' F

    '='  shift, and go to state 31


state 23

    8 R: F '<' . '=' F

    '='  shift, and go to state 32


state 24

    9 R: F '>' . '=' F

    '='  shift, and go to state 33


state 25

    4 A: ID '=' A .

    $default  reduce using rule 4 (A)


state 26

   18 F: '(' E ')' .

    $default  reduce using rule 18 (F)


state 27

   10 E: E '+' T .
   13 T: T . '*' F
   14  | T . '/' F

    '*'  shift, and go to state 20
    '/'  shift, and go to state 21

    $default  reduce using rule 10 (E)


state 28

   11 E: E '-' T .
   13 T: T . '*' F
   14  | T . '/' F

    '*'  shift, and go to state 20
    '/'  shift, and go to state 21

    $default  reduce using rule 11 (E)


state 29

   13 T: T '*' F .

    $default  reduce using rule 13 (T)


state 30

   14 T: T '/' F .

    $default  reduce using rule 14 (T)


state 31

    7 R: F '=' '=' . F

    NUM  shift, and go to state 1
    ID   shift, and go to state 12
    '('  shift, and go to state 3

    F  go to state 34


state 32

    8 R: F '<' '=' . F

    NUM  shift, and go to state 1
    ID   shift, and go to state 12
    '('  shift, and go to state 3

    F  go to state 35


state 33

    9 R: F '>' '=' . F

    NUM  shift, and go to state 1
    ID   shift, and go to state 12
    '('  shift, and go to state 3

    F  go to state 36


state 34

    7 R: F '=' '=' F .

    $default  reduce using rule 7 (R)


state 35

    8 R: F '<' '=' F .

    $default  reduce using rule 8 (R)


state 36

    9 R: F '>' '=' F .

    $default  reduce using rule 9 (R)
